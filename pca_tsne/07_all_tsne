# ALL TSNE

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import VarianceThreshold
from sklearn.manifold import TSNE
import seaborn as sns
import json
import sys
import os

# ---------------------------------------------------------------------------------------------------
# LOAD DATA

feature_data_path = "/Volumes/dax-hd/project-data/search-files/merged-data.csv"
cath_dict_path = "/Volumes/dax-hd/project-data/search-files/cath-archetype-dict.txt"
uniprot = "/Volumes/dax-hd/project-data/search-files/uniprot-data.csv"
base_save_folder = "/Volumes/dax-hd/project-data/final-figures/"

if not os.path.exists(base_save_folder):
    os.makedirs(base_save_folder)

save_folder = os.path.join(base_save_folder)
if not os.path.exists(save_folder):
    os.makedirs(save_folder)

font = 'Andale Mono'

# ---------------------------------------------------------------------------------------------------
# COLUMN RESTRICTIONS

destress_columns = [
    "hydrophobic_fitness",
    "isoelectric_point",
    "charge",
    "mass",
    "num_residues",
    "packing_density",
    "budeff_total",
    "budeff_steric",
    "budeff_desolvation",
    "budeff_charge",
    "evoef2_total",
    "evoef2_ref_total",
    "evoef2_intraR_total",
    "evoef2_interS_total",
    "evoef2_interD_total",
    "dfire2_total",
    "rosetta_total",
    "rosetta_fa_atr",
    "rosetta_fa_rep",
    "rosetta_fa_intra_rep",
    "rosetta_fa_elec",
    "rosetta_fa_sol",
    "rosetta_lk_ball_wtd",
    "rosetta_fa_intra_sol_xover4",
    "rosetta_hbond_lr_bb",
    "rosetta_hbond_sr_bb",
    "rosetta_hbond_bb_sc",
    "rosetta_hbond_sc",
    "rosetta_dslf_fa13",
    "rosetta_rama_prepro",
    "rosetta_p_aa_pp",
    "rosetta_fa_dun",
    "rosetta_omega",
    "rosetta_pro_close",
    "rosetta_yhh_planarity",
    "aggrescan3d_total_value",
    "aggrescan3d_avg_value",
    "aggrescan3d_min_value",
    "aggrescan3d_max_value"
    ]

normalise_columns = [
    "num_residues", "hydrophobic_fitness", "budeff_total", "budeff_steric", "budeff_desolvation", "budeff_charge",
    "evoef2_total", "evoef2_ref_total", "evoef2_intraR_total", "evoef2_interS_total", "evoef2_interD_total",
    "dfire2_total", "rosetta_total", "rosetta_fa_atr", "rosetta_fa_rep", "rosetta_fa_intra_rep", "rosetta_fa_elec",
    "rosetta_fa_sol", "rosetta_lk_ball_wtd", "rosetta_fa_intra_sol_xover4", "rosetta_hbond_lr_bb",
    "rosetta_hbond_sr_bb", "rosetta_hbond_bb_sc", "rosetta_hbond_sc", "rosetta_dslf_fa13", "rosetta_rama_prepro",
    "rosetta_p_aa_pp", "rosetta_fa_dun", "rosetta_omega", "rosetta_pro_close", "rosetta_yhh_planarity"
]

# ---------------------------------------------------------------------------------------------------
# LOGGER

class Logger(object):
    def __init__(self, filename="Default.log"):
        self.terminal = sys.stdout
        self.log = open(filename, "a")

    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)

    def flush(self):
        pass
path_to_log_file = os.path.join(base_save_folder, "log_tsne.txt")
original_stdout = sys.stdout
sys.stdout = Logger(path_to_log_file)

# ---------------------------------------------------------------------------------------------------
# ADDING CATH AND ARCHETYPE TAGS

def add_cath_data(df, path):
    with open(path, 'r') as file:
        cath_dict = json.load(file)
    def get_descriptions(row):
        class_num = str(row['Class number'])
        arch_num = str(row['Architecture number'])
        top_num = str(row['Topology number'])
        super_num = str(row['Homologous superfamily number'])

        class_desc = cath_dict.get(class_num, {}).get('description', "Unknown")
        arch_desc = cath_dict.get(class_num, {}).get(arch_num, {}).get('description', "Unknown")
        top_desc = cath_dict.get(class_num, {}).get(arch_num, {}).get(top_num, {}).get('description', "Unknown")
        super_desc = cath_dict.get(class_num, {}).get(arch_num, {}).get(top_num, {}).get(super_num, {}).get('description', "Unknown")

        return pd.Series([class_desc, arch_desc, top_desc, super_desc])

    descriptions = df.apply(get_descriptions, axis=1, result_type='expand')
    df[['class_description', 'arch_description', 'top_description', 'super_description']] = descriptions
    
    df['is_class_archetype'] = False
    df['is_arch_archetype'] = False
    df['is_top_archetype'] = False
    df['is_super_archetype'] = False

    for index, row in df.iterrows():
        class_num, arch_num, top_num, super_num = str(row['Class number']), str(row['Architecture number']), str(row['Topology number']), str(row['Homologous superfamily number'])
        
        class_archetype_protein_id = cath_dict.get(class_num, {}).get('protein_id', "")
        if class_archetype_protein_id and class_archetype_protein_id[:4] in row['design_name']:
            df.at[index, 'is_class_archetype'] = True
        
        arch_archetype_protein_id = cath_dict.get(class_num, {}).get(arch_num, {}).get('protein_id', "")
        if arch_archetype_protein_id and arch_archetype_protein_id[:4] in row['design_name']:
            df.at[index, 'is_arch_archetype'] = True
        
        top_archetype_protein_id = cath_dict.get(class_num, {}).get(arch_num, {}).get(top_num, {}).get('protein_id', "")
        if top_archetype_protein_id and top_archetype_protein_id[:4] in row['design_name']:
            df.at[index, 'is_top_archetype'] = True

        super_archetype_protein_id = cath_dict.get(class_num, {}).get(arch_num, {}).get(top_num, {}).get(super_num, {}).get('protein_id', "")
        if super_archetype_protein_id and super_archetype_protein_id[:4] in row['design_name']:
            df.at[index, 'is_super_archetype'] = True

    return df

# ---------------------------------------------------------------------------------------------------
# ADDING PROTEIN NAME FOR SUPERFAMILY ANALYSIS

def add_protein_name(df, uniprot_path):
    uniprot_df = pd.read_csv(uniprot_path)
    df = pd.merge(df, uniprot_df[['PDB ID', 'Protein name']], left_on='design_name', right_on='PDB ID', how='left')
    df['Protein name'] = df['Protein name'].fillna('Unknown')
    df.drop(columns='PDB ID', inplace=True)
    return df

# ---------------------------------------------------------------------------------------------------
# DATA PROCESSING

def process_data(df, normalise_columns, destress_columns, tolerance=0.6, variance_threshold = 0.05):
    print("---------PREPROCESSING----------\n")
    non_destress_columns = df.drop(columns=destress_columns, errors='ignore')
    valid_destress_columns = [col for col in destress_columns if col in df.columns]

    threshold = 0.15
    missing_percentage = df[valid_destress_columns].isnull().sum() / len(df)
    columns_to_drop_due_to_missing = []

    print("\tDropping columns due to missing values > {:.0f}%:".format(threshold * 100))
    for col in valid_destress_columns:
        percentage = missing_percentage[col] * 100
        if percentage > threshold * 100:
            print(f"\t\t- {col}: {percentage:.2f}%")
            columns_to_drop_due_to_missing.append(col)

    df = df.drop(columns=columns_to_drop_due_to_missing)
    valid_destress_columns = [col for col in valid_destress_columns if col not in columns_to_drop_due_to_missing]

    if 'num_residues' in df.columns:
        for feature in [col for col in normalise_columns if col in valid_destress_columns]:
            df[feature] = df[feature] / df['num_residues']
    
    print("\n\tDropping columns explicitly: \n\t\t- mass\n\t\t- num_residues\n")
    df = df.drop(['mass', 'num_residues'], axis=1, errors='ignore')
    valid_destress_columns = [col for col in valid_destress_columns if col not in ['mass', 'num_residues']]

    corr_matrix_before = df[valid_destress_columns].corr()

    plt.figure(figsize=(14, 12))
    sns.heatmap(corr_matrix_before, cmap='viridis', vmin=-1, vmax=1, annot=False, fmt=".2f", annot_kws={"size": 10})
    plt.title("Correlation Matrix Before Removing Highly Correlated Features")
    plt.tight_layout()
    filename = "correlation_matrix_before.png"
    file_path = os.path.join(base_save_folder, filename)
    plt.savefig(file_path, bbox_inches='tight', dpi=300)
    plt.close()

    dropped_features = []
    while True:
        corr_matrix = df[valid_destress_columns].corr().abs()
        upper_tri = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(bool))
        to_drop = [column for column in upper_tri.columns if any(upper_tri[column] > tolerance)]
        if not to_drop:
            break
        feature_to_remove = to_drop[0]
        df = df.drop(columns=[feature_to_remove], errors='ignore')
        valid_destress_columns.remove(feature_to_remove)
        dropped_features.append(feature_to_remove)
    print(f"\tDropped features due to high correlation >{tolerance*100:.2f}%:\n\t\t- " + "\n\t\t- ".join(dropped_features) + "\n")

    corr_matrix_after = df[valid_destress_columns].corr()

    plt.figure(figsize=(14, 12))
    sns.heatmap(corr_matrix_after, cmap='viridis', vmin=-1, vmax=1, annot=False, fmt=".2f", annot_kws={"size": 10})
    plt.title("Correlation Matrix After Removing Highly Correlated Features")
    plt.tight_layout()
    filename = "correlation_matrix_after.png"
    file_path = os.path.join(base_save_folder, filename)
    plt.savefig(file_path, bbox_inches='tight', dpi=300)
    plt.close()

    original_columns_set = set(valid_destress_columns)
    selector = VarianceThreshold(threshold=variance_threshold)
    df_filtered = selector.fit_transform(df[valid_destress_columns])
    columns_mask = selector.get_support(indices=True)
    valid_destress_columns = [valid_destress_columns[i] for i in columns_mask]
    df = df[valid_destress_columns + list(non_destress_columns.columns)]
    dropped_columns_due_to_variance = original_columns_set - set(valid_destress_columns)
    if dropped_columns_due_to_variance:
        print(f"\tDropped features due to little/no variance: " + "\n\t\t- " + "\n\t\t- ".join(dropped_columns_due_to_variance) + "\n")
    else:
        print("\tNo features dropped due to little/no variance.\n")

    dropped_features = ['rosetta_pro_close', 'rosetta_dslf_fa13', 'rosetta_yhh_planarity', 'rosetta_omega', 'aggrescan3d_min_value', 'aggrescan3d_max_value']
    df = df.drop(dropped_features, axis=1, errors='ignore')
    valid_destress_columns = [col for col in valid_destress_columns if col not in dropped_features]
    print(f"\tDropped features due to skew:\n\t\t- " + "\n\t\t- ".join(dropped_features) + "\n")

    scaler = StandardScaler()
    df_scaled = scaler.fit_transform(df[valid_destress_columns])
    df_scaled = pd.DataFrame(df_scaled, columns=valid_destress_columns, index=df.index)

    print(f"\tFeatures used:\n\t\t- " + "\n\t\t- ".join(df[valid_destress_columns].columns) + "\n")

    df_processed = pd.concat([df_scaled, non_destress_columns], axis=1)
    df_processed = df_processed.dropna()
    print("---------PREPROCESSING----------\n")
    return df_processed

# ---------------------------------------------------------------------------------------------------
# TSNE PLOTTING

def plot_tsne_by_all(df, perplexity, n_iter):
    save_folder = os.path.join(base_save_folder, "all")
    if not os.path.exists(save_folder):
        os.makedirs(save_folder)

    print("---------T-SNE BY ALL-----------\n")
    print("--(only archetypal toplogies)---\n")

    unique_classes = df['class_description'].unique()
    colors = ['#ed5054', '#3f93b4', '#e0ac24', '#fff785', '#dbcfc2', '#a8e6cf', '#dcedc1']
    markers = ['circle', 'square', 'triangle-up', 'diamond', 'pentagon', 'star', 'cross']

    numeric_destress_columns = [col for col in destress_columns if col in df.columns and np.issubdtype(df[col].dtype, np.number)]
    df_filtered = df[df['is_top_archetype']].copy()
    df_numeric = df_filtered[numeric_destress_columns].dropna()

    try:
        tsne = TSNE(n_components=2, perplexity=perplexity, n_iter=n_iter, random_state=42)
        tsne_results = tsne.fit_transform(df_numeric)
        tsne_df = pd.DataFrame(tsne_results, columns=['D1', 'D2'], index=df_numeric.index)

        tsne_df['class_description'] = df.loc[df_numeric.index, 'class_description']
        tsne_df['hover_text'] = df.loc[df_numeric.index, 'Protein name']

        fig = go.Figure()

        for i, class_description in enumerate(unique_classes):
            class_df = tsne_df[tsne_df['class_description'] == class_description]
            print(f"\tClass: {class_description}, {len(class_df)}")
            fig.add_trace(go.Scatter(
                x=class_df['D1'],
                y=class_df['D2'],
                mode='markers',
                marker=dict(size=9, line=dict(width=1), symbol=markers[i % len(markers)], color=colors[i % len(colors)]),
                name=class_description,
                text=class_df['hover_text'],
                hoverinfo='text'
            ))

        fig.update_layout(
            font=dict(family=font, size=12, color="black"),
            title='t-SNE for all data by class',
            xaxis_title='D1',
            yaxis_title='D2',
            legend_title='Class Description',
            legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01)
        )

        fig.write_html(os.path.join(save_folder, "all_tsne.html"))

    except Exception as e:
        print(f"!!\tFailed to plot t-SNE due to error: {e}\n")

    print(f"\nt-SNE for all - completed.\n")

def plot_tsne_by_class(df, perplexity, n_iter):

    print("--------T-SNE BY CLASS----------\n")
    print("-(only archetypal superfamilies)\n")

    colors = ['#ed5054','#3f93b4','#e0ac24', '#fff785', '#dbcfc2', '#a8e6cf','#dcedc1',
    '#a593e0', '#ff8b94']
    markers = ['circle', 'square', 'triangle-up', 'diamond', 'pentagon', 
    'star', 'cross', 'x', 'hexagon', 'hexagon2', 'octagon', 'hexagram',
    'star-triangle-up', 'star-square', 'star-diamond', 'diamond-tall',
    'diamond-wide', 'hourglass', 'bowtie', 'circle-cross','circle-x',
    'square-cross', 'square-x', 'diamond-cross', 'diamond-x']
    
    for i, class_name in enumerate(df['class_description'].unique()):
        save_folder = os.path.join(base_save_folder, "class", class_name.replace(' ', '_'))
        if not os.path.exists(save_folder):
            os.makedirs(save_folder)

        df_class = df[df['class_description'] == class_name].copy()
        numeric_destress_columns = [col for col in destress_columns if col in df.columns and np.issubdtype(df[col].dtype, np.number)]
        df_filtered = df_class[df_class['is_super_archetype']].copy()
        df_numeric = df_filtered[numeric_destress_columns].dropna()

        try:
            tsne = TSNE(n_components=2, perplexity=perplexity, n_iter=n_iter, random_state=42)
            tsne_results = tsne.fit_transform(df_numeric)
            tsne_df = pd.DataFrame(tsne_results, columns=['D1', 'D2'], index=df_numeric.index)

            tsne_df['arch_description'] = df_class.loc[df_numeric.index, 'arch_description']
            tsne_df['is_super_archetype'] = df_class.loc[df_numeric.index, 'is_super_archetype']
            tsne_df['hover_text'] = df_class.loc[df_numeric.index, 'Protein name']
            print(f"\tClass: {class_name} - {len(pca_df['arch_description'].unique())}")

            fig = go.Figure()
            for j, arch_desc in enumerate(tsne_df['arch_description'].unique()):
                arch_df = tsne_df[tsne_df['arch_description'] == arch_desc]
                fig.add_trace(go.Scatter(
                    x=arch_df['D1'],
                    y=arch_df['D2'],
                    mode='markers',
                    name=arch_desc,
                    marker=dict(
                        size=9, line=dict(width=1), symbol=markers[j % len(markers)],
                        color=colors[j % len(colors)]),
                text=arch_df['hover_text'],
                hoverinfo='text'
                ))

            fig.update_layout(
                font=dict(family=font, size=12, color="black"),
                title=f't-SNE for {class_name} (Class) by Architecture',
                xaxis_title='D1',
                yaxis_title='D2',
                legend_title='Architecture Description'
            )

            fig.write_html(os.path.join(save_folder, f"{class_name.replace(' ', '_')}_tsne.html"))

            print(f"\tClass number of structures: {len(tsne_df)}\n")
            print("--------------------------------\n")

        except Exception as e:
            print(f"!!\tFailed to plot t-SNE due to error: {e}")
    
    print("t-sne of Class by Architecture - completed.\n")

def plot_tsne_by_arch(df, perplexity, n_iter):

    print("-----T-SNE BY ARCHITECTURE------\n")
    print("--------------------------------\n")

    colors = ['#ed5054','#3f93b4','#e0ac24', '#fff785', '#dbcfc2', '#a8e6cf','#dcedc1',
    '#a593e0', '#ff8b94']
    markers = ['circle', 'square', 'triangle-up', 'diamond', 'pentagon', 
    'star', 'cross', 'x', 'hexagon', 'hexagon2', 'octagon', 'hexagram',
    'star-triangle-up', 'star-square', 'star-diamond', 'diamond-tall',
    'diamond-wide', 'hourglass', 'bowtie', 'circle-cross','circle-x',
    'square-cross', 'square-x', 'diamond-cross', 'diamond-x']
    
    for i, arch_name in enumerate(df['arch_description'].unique()):
        print(f"\n\tArchitecture: {arch_name} - {len(df['arch_description'].unique())}")

        unsanitised_arch_name = arch_name
        arch_name = arch_name.replace(' ', '_').replace('/', '_')

        save_folder = os.path.join(base_save_folder, "arch", arch_name.replace(' ', '_'))
        if not os.path.exists(save_folder):
            os.makedirs(save_folder)

        df_arch = df[df['arch_description'] == unsanitised_arch_name].copy()
        numeric_destress_columns = [col for col in destress_columns if col in df.columns and np.issubdtype(df[col].dtype, np.number)]
        df_numeric = df_arch[numeric_destress_columns].dropna()

        try:
            tsne = TSNE(n_components=2, perplexity=perplexity, n_iter=n_iter, random_state=42)
            tsne_results = tsne.fit_transform(df_numeric)
            tsne_df = pd.DataFrame(tsne_results, columns=['D1', 'D2'], index=df_numeric.index)

            tsne_df['top_description'] = df_arch.loc[df_numeric.index, 'top_description']
            tsne_df['hover_text'] = df_arch.loc[df_numeric.index, 'Protein name']

            fig = go.Figure()
            for j, top_desc in enumerate(tsne_df['top_description'].unique()):
                top_df = tsne_df[tsne_df['top_description'] == top_desc]
                fig.add_trace(go.Scatter(
                    x=top_df['D1'],
                    y=top_df['D2'],
                    mode='markers',
                    name=top_desc,
                    marker=dict(
                        size=9, line=dict(width=1), symbol=markers[j % len(markers)],
                        color=colors[j % len(colors)]),
                text=top_df['hover_text'],
                hoverinfo='text'
                ))

            fig.update_layout(
                font=dict(family=font, size=12, color="black"),
                title=f't-SNE for {unsanitised_arch_name} (Architecture) by Topology',
                xaxis_title='D1',
                yaxis_title='D2',
                legend_title='Topology Description'
            )

            fig.write_html(os.path.join(save_folder, f"{arch_name.replace(' ', '_')}_tsne.html"))
            
            print(f"\tArchitecture number of structures: {len(tsne_df)}\n")
            print("--------------------------------\n")
            if 'top_description' in tsne_df.columns and not tsne_df['top_description'].isnull().all():    
                topology_counts = tsne_df['top_description'].value_counts()
                for topology, count in topology_counts.items():
                    print(f"\t\t{topology} - {count}")
            else:
                print("!!\t\tNo topology data available.")

        except Exception as e:
            print(f"!!\tFailed to plot t-SNE due to error: {e}")


        
        print("\n--------------------------------")

    print("\nt-SNE of Architecture by Topology - completed.\n")

def plot_tsne_by_top(df, perplexity, n_iter):

    print("-----T-SNE BY ARCHITECTURE------\n")
    print("--------------------------------\n")

    colors = ['#ed5054','#3f93b4','#e0ac24', '#fff785', '#dbcfc2', '#a8e6cf','#dcedc1',
    '#a593e0', '#ff8b94']
    markers = ['circle', 'square', 'triangle-up', 'diamond', 'pentagon', 
    'star', 'cross', 'x', 'hexagon', 'hexagon2', 'octagon', 'hexagram',
    'star-triangle-up', 'star-square', 'star-diamond', 'diamond-tall',
    'diamond-wide', 'hourglass', 'bowtie', 'circle-cross','circle-x',
    'square-cross', 'square-x', 'diamond-cross', 'diamond-x']
    
    for i, top_name in enumerate(df['top_description'].unique()):
        print(f"\n\tTopology: {top_name} - {len(df['top_description'].unique())}")

        unsanitised_top_name = top_name
        top_name = top_name.replace(' ', '_').replace('/', '_')

        save_folder = os.path.join(base_save_folder, "top", top_name.replace(' ', '_'))
        if not os.path.exists(save_folder):
            os.makedirs(save_folder)

        df_top = df[df['top_description'] == unsanitised_top_name].copy()
        numeric_destress_columns = [col for col in destress_columns if col in df.columns and np.issubdtype(df[col].dtype, np.number)]
        df_numeric = df_top[numeric_destress_columns].dropna()

        try:
            tsne = TSNE(n_components=2, perplexity=perplexity, n_iter=n_iter, random_state=42)
            tsne_results = tsne.fit_transform(df_numeric)
            tsne_df = pd.DataFrame(tsne_results, columns=['D1', 'D2'], index=df_numeric.index)

            tsne_df['super_description'] = df_top.loc[df_numeric.index, 'super_description']
            tsne_df['hover_text'] = df_top.loc[df_numeric.index, 'Protein name']

            fig = go.Figure()
            for j, super_desc in enumerate(tsne_df['super_description'].unique()):
                super_df = tsne_df[tsne_df['super_description'] == super_desc]
                fig.add_trace(go.Scatter(
                    x=super_df['D1'],
                    y=super_df['D2'],
                    mode='markers',
                    name=super_desc,
                    marker=dict(
                        size=9, line=dict(width=1), symbol=markers[j % len(markers)],
                        color=colors[j % len(colors)]),
                text=super_df['hover_text'],
                hoverinfo='text'
                ))

            fig.update_layout(
                font=dict(family=font, size=12, color="black"),
                title=f't-SNE for {unsanitised_top_name} (Topology) by Superfamily',
                xaxis_title='D1',
                yaxis_title='D2',
                legend_title='Superfamily Description'
            )

            fig.write_html(os.path.join(save_folder, f"{top_name.replace(' ', '_')}_tsne.html"))
            if 'super_description' in tsne_df.columns and not tsne_df['super_description'].isnull().all():    
                super_counts = tsne_df['super_description'].value_counts()
                for super, count in super_counts.items():
                    print(f"\t\t{super} - {count}")
        except Exception as e:
            print(f"!!\tFailed to plot t-SNE due to error: {e}")


        else:
            print("!!\t\tNo superfamily data available.")
        
        print("\n--------------------------------")

    print("\nt-SNE of Topology by Superfamily - completed.\n")
# ---------------------------------------------------------------------------------------------------

def main():
    print("-------------T-SNE--------------\n")
    print("--------------------------------\n")

    df = pd.read_csv(feature_data_path)
    
    print(f"Total number of preprocessed structures: {len(df)}\n")
    df_processed = process_data(df, normalise_columns, destress_columns)
    print(f"Total number of processed structures: {len(df_processed)}\n")
    df_labelled = add_cath_data(df_processed, cath_dict_path)
    df_named = add_protein_name(df_labelled, uniprot)
    df_final = df_named.drop_duplicates()

    plot_tsne_by_all(df_final, perplexity=400, n_iter=1000)
    print("--------------------------------\n")
    plot_tsne_by_class(df_final, perplexity=100, n_iter=1000)
    print("--------------------------------\n")
    plot_tsne_by_arch(df_final, perplexity=50, n_iter=1500)
    print("--------------------------------\n")
    plot_tsne_by_top(df_final, perplexity=10, n_iter=1500)
    print("--------------------------------\n")

    print("--------------------------------\n")
    print("--------T-SNE COMPLETED---------\n")
    print("--------------------------------\n")
    sys.stdout = original_stdout
# ---------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    main()